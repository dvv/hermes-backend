# @author Igor compiler
# @doc Compiler version: igorc 2.1.4
# DO NOT EDIT THIS FILE - it is machine generated

defmodule BambooProtocol do

  defmodule BambooInstance do

    @enforce_keys [:key, :company_domain, :api_key]
    defstruct [key: nil, company_domain: nil, api_key: nil]

    @type t :: %BambooInstance{key: atom, company_domain: String.t(), api_key: String.t()}

    @spec from_json!(Igor.Json.json()) :: t()
    def from_json!(json) do
      key = Igor.Json.parse_field!(json, "key", :atom)
      company_domain = Igor.Json.parse_field!(json, "company_domain", :string)
      api_key = Igor.Json.parse_field!(json, "api_key", :string)
      %BambooInstance{key: key, company_domain: company_domain, api_key: api_key}
    end

    @spec to_json!(t()) :: Igor.Json.json()
    def to_json!(args) do
      %{key: key, company_domain: company_domain, api_key: api_key} = args
      %{
        "key" => Igor.Json.pack_value(key, :atom),
        "company_domain" => Igor.Json.pack_value(company_domain, :string),
        "api_key" => Igor.Json.pack_value(api_key, :string)
      }
    end

  end

  defmodule Gender do

    @type t ::
      :male #
    | :female #

    defguard is_gender(value) when value === :male or value === :female

    @spec from_string!(String.t()) :: t()
    def from_string!("Male"), do: :male
    def from_string!("Female"), do: :female

    @spec to_string!(t()) :: String.t()
    def to_string!(:male), do: "Male"
    def to_string!(:female), do: "Female"

    @spec from_json!(String.t()) :: t()
    def from_json!("Male"), do: :male
    def from_json!("Female"), do: :female

    @spec to_json!(t()) :: String.t()
    def to_json!(:male), do: "Male"
    def to_json!(:female), do: "Female"

  end

  defmodule EmployeeStatus do

    @type t ::
      :active #
    | :inactive #

    defguard is_employee_status(value) when value === :active or value === :inactive

    @spec from_string!(String.t()) :: t()
    def from_string!("Active"), do: :active
    def from_string!("Inactive"), do: :inactive

    @spec to_string!(t()) :: String.t()
    def to_string!(:active), do: "Active"
    def to_string!(:inactive), do: "Inactive"

    @spec from_json!(String.t()) :: t()
    def from_json!("Active"), do: :active
    def from_json!("Inactive"), do: :inactive

    @spec to_json!(t()) :: String.t()
    def to_json!(:active), do: "Active"
    def to_json!(:inactive), do: "Inactive"

  end

  defmodule Field do

    @enforce_keys [:id, :type, :name]
    defstruct [id: nil, type: nil, name: nil]

    @type t :: %Field{id: String.t(), type: String.t(), name: String.t()}

    @spec from_json!(Igor.Json.json()) :: t()
    def from_json!(json) do
      id = Igor.Json.parse_field!(json, "id", :string)
      type = Igor.Json.parse_field!(json, "type", :string)
      name = Igor.Json.parse_field!(json, "name", :string)
      %Field{id: id, type: type, name: name}
    end

    @spec to_json!(t()) :: Igor.Json.json()
    def to_json!(args) do
      %{id: id, type: type, name: name} = args
      %{
        "id" => Igor.Json.pack_value(id, :string),
        "type" => Igor.Json.pack_value(type, :string),
        "name" => Igor.Json.pack_value(name, :string)
      }
    end

  end

  defmodule Employee do

    defstruct [id: nil, display_name: nil, first_name: nil, last_name: nil, preferred_name: nil, gender: nil, job_title: nil, work_email: nil, department: nil, location: nil, division: nil, photo_uploaded: nil, photo_url: nil, status: nil, supervisor: nil, supervisor_id: nil, supervisor_e_id: nil, supervisor_email: nil]

    @type t :: %Employee{id: String.t() | nil, display_name: String.t() | nil, first_name: String.t() | nil, last_name: String.t() | nil, preferred_name: String.t() | nil, gender: BambooProtocol.Gender.t() | nil, job_title: String.t() | nil, work_email: String.t() | nil, department: String.t() | nil, location: String.t() | nil, division: String.t() | nil, photo_uploaded: boolean | nil, photo_url: String.t() | nil, status: BambooProtocol.EmployeeStatus.t() | nil, supervisor: String.t() | nil, supervisor_id: String.t() | nil, supervisor_e_id: String.t() | nil, supervisor_email: String.t() | nil}

    @spec from_json!(Igor.Json.json()) :: t()
    def from_json!(json) do
      id = Igor.Json.parse_field!(json, "id", :string, nil)
      display_name = Igor.Json.parse_field!(json, "displayName", :string, nil)
      first_name = Igor.Json.parse_field!(json, "firstName", :string, nil)
      last_name = Igor.Json.parse_field!(json, "lastName", :string, nil)
      preferred_name = Igor.Json.parse_field!(json, "preferredName", :string, nil)
      gender = Igor.Json.parse_field!(json, "gender", {:custom, BambooProtocol.Gender}, nil)
      job_title = Igor.Json.parse_field!(json, "jobTitle", :string, nil)
      work_email = Igor.Json.parse_field!(json, "workEmail", :string, nil)
      department = Igor.Json.parse_field!(json, "department", :string, nil)
      location = Igor.Json.parse_field!(json, "location", :string, nil)
      division = Igor.Json.parse_field!(json, "division", :string, nil)
      photo_uploaded = Igor.Json.parse_field!(json, "photoUploaded", :boolean, nil)
      photo_url = Igor.Json.parse_field!(json, "photoUrl", :string, nil)
      status = Igor.Json.parse_field!(json, "status", {:custom, BambooProtocol.EmployeeStatus}, nil)
      supervisor = Igor.Json.parse_field!(json, "supervisor", :string, nil)
      supervisor_id = Igor.Json.parse_field!(json, "supervisorId", :string, nil)
      supervisor_e_id = Igor.Json.parse_field!(json, "supervisorEId", :string, nil)
      supervisor_email = Igor.Json.parse_field!(json, "supervisorEmail", :string, nil)
      %Employee{
        id: id,
        display_name: display_name,
        first_name: first_name,
        last_name: last_name,
        preferred_name: preferred_name,
        gender: gender,
        job_title: job_title,
        work_email: work_email,
        department: department,
        location: location,
        division: division,
        photo_uploaded: photo_uploaded,
        photo_url: photo_url,
        status: status,
        supervisor: supervisor,
        supervisor_id: supervisor_id,
        supervisor_e_id: supervisor_e_id,
        supervisor_email: supervisor_email
      }
    end

    @spec to_json!(t()) :: Igor.Json.json()
    def to_json!(args) do
      %{
        id: id,
        display_name: display_name,
        first_name: first_name,
        last_name: last_name,
        preferred_name: preferred_name,
        gender: gender,
        job_title: job_title,
        work_email: work_email,
        department: department,
        location: location,
        division: division,
        photo_uploaded: photo_uploaded,
        photo_url: photo_url,
        status: status,
        supervisor: supervisor,
        supervisor_id: supervisor_id,
        supervisor_e_id: supervisor_e_id,
        supervisor_email: supervisor_email
      } = args
      %{}
        |> Igor.Json.pack_field("id", id, :string)
        |> Igor.Json.pack_field("displayName", display_name, :string)
        |> Igor.Json.pack_field("firstName", first_name, :string)
        |> Igor.Json.pack_field("lastName", last_name, :string)
        |> Igor.Json.pack_field("preferredName", preferred_name, :string)
        |> Igor.Json.pack_field("gender", gender, {:custom, BambooProtocol.Gender})
        |> Igor.Json.pack_field("jobTitle", job_title, :string)
        |> Igor.Json.pack_field("workEmail", work_email, :string)
        |> Igor.Json.pack_field("department", department, :string)
        |> Igor.Json.pack_field("location", location, :string)
        |> Igor.Json.pack_field("division", division, :string)
        |> Igor.Json.pack_field("photoUploaded", photo_uploaded, :boolean)
        |> Igor.Json.pack_field("photoUrl", photo_url, :string)
        |> Igor.Json.pack_field("status", status, {:custom, BambooProtocol.EmployeeStatus})
        |> Igor.Json.pack_field("supervisor", supervisor, :string)
        |> Igor.Json.pack_field("supervisorId", supervisor_id, :string)
        |> Igor.Json.pack_field("supervisorEId", supervisor_e_id, :string)
        |> Igor.Json.pack_field("supervisorEmail", supervisor_email, :string)
    end

  end

  defmodule EmployeeDirectory do

    defstruct [fields: [], employees: []]

    @type t :: %EmployeeDirectory{fields: [BambooProtocol.Field.t()], employees: [BambooProtocol.Employee.t()]}

    @spec from_json!(Igor.Json.json()) :: t()
    def from_json!(json) do
      fields = Igor.Json.parse_field!(json, "fields", {:list, {:custom, BambooProtocol.Field}}, [])
      employees = Igor.Json.parse_field!(json, "employees", {:list, {:custom, BambooProtocol.Employee}}, [])
      %EmployeeDirectory{fields: fields, employees: employees}
    end

    @spec to_json!(t()) :: Igor.Json.json()
    def to_json!(args) do
      %{fields: fields, employees: employees} = args
      %{
        "fields" => Igor.Json.pack_value(fields, {:list, {:custom, BambooProtocol.Field}}),
        "employees" => Igor.Json.pack_value(employees, {:list, {:custom, BambooProtocol.Employee}})
      }
    end

  end

  defmodule TimeOffEntry do

    @enforce_keys [:id, :employee_id, :name, :start, :end, :type]
    defstruct [id: nil, employee_id: nil, name: nil, start: nil, end: nil, type: nil]

    @type t :: %TimeOffEntry{id: integer, employee_id: integer, name: String.t(), start: BambooProtocol.date(), end: BambooProtocol.date(), type: String.t()}

    @spec from_json!(Igor.Json.json()) :: t()
    def from_json!(json) do
      id = Igor.Json.parse_field!(json, "id", :int)
      employee_id = Igor.Json.parse_field!(json, "employeeId", :int)
      name = Igor.Json.parse_field!(json, "name", :string)
      start = Igor.Json.parse_field!(json, "start", {:custom, Util.Date})
      var_end = Igor.Json.parse_field!(json, "end", {:custom, Util.Date})
      type = Igor.Json.parse_field!(json, "type", :string)
      %TimeOffEntry{
        id: id,
        employee_id: employee_id,
        name: name,
        start: start,
        end: var_end,
        type: type
      }
    end

    @spec to_json!(t()) :: Igor.Json.json()
    def to_json!(args) do
      %{
        id: id,
        employee_id: employee_id,
        name: name,
        start: start,
        end: var_end,
        type: type
      } = args
      %{
        "id" => Igor.Json.pack_value(id, :int),
        "employeeId" => Igor.Json.pack_value(employee_id, :int),
        "name" => Igor.Json.pack_value(name, :string),
        "start" => Util.Date.to_json!(start),
        "end" => Util.Date.to_json!(var_end),
        "type" => Igor.Json.pack_value(type, :string)
      }
    end

  end

  defmodule TimeOffRequestType do

    @enforce_keys [:id, :name]
    defstruct [id: nil, name: nil]

    @type t :: %TimeOffRequestType{id: String.t(), name: String.t()}

    @spec from_json!(Igor.Json.json()) :: t()
    def from_json!(json) do
      id = Igor.Json.parse_field!(json, "id", :string)
      name = Igor.Json.parse_field!(json, "name", :string)
      %TimeOffRequestType{id: id, name: name}
    end

    @spec to_json!(t()) :: Igor.Json.json()
    def to_json!(args) do
      %{id: id, name: name} = args
      %{
        "id" => Igor.Json.pack_value(id, :string),
        "name" => Igor.Json.pack_value(name, :string)
      }
    end

  end

  defmodule TimeOffRequestStatus do

    @enforce_keys [:status]
    defstruct [status: nil]

    @type t :: %TimeOffRequestStatus{status: String.t()}

    @spec from_json!(Igor.Json.json()) :: t()
    def from_json!(json) do
      status = Igor.Json.parse_field!(json, "status", :string)
      %TimeOffRequestStatus{status: status}
    end

    @spec to_json!(t()) :: Igor.Json.json()
    def to_json!(args) do
      %{status: status} = args
      %{
        "status" => Igor.Json.pack_value(status, :string)
      }
    end

  end

  defmodule TimeOffRequest do

    @enforce_keys [:id, :employee_id, :name, :start, :end, :status, :type]
    defstruct [id: nil, employee_id: nil, name: nil, start: nil, end: nil, status: nil, type: nil]

    @type t :: %TimeOffRequest{id: String.t(), employee_id: String.t(), name: String.t(), start: BambooProtocol.date(), end: BambooProtocol.date(), status: BambooProtocol.TimeOffRequestStatus.t(), type: BambooProtocol.TimeOffRequestType.t()}

    @spec from_json!(Igor.Json.json()) :: t()
    def from_json!(json) do
      id = Igor.Json.parse_field!(json, "id", :string)
      employee_id = Igor.Json.parse_field!(json, "employeeId", :string)
      name = Igor.Json.parse_field!(json, "name", :string)
      start = Igor.Json.parse_field!(json, "start", {:custom, Util.Date})
      var_end = Igor.Json.parse_field!(json, "end", {:custom, Util.Date})
      status = Igor.Json.parse_field!(json, "status", {:custom, BambooProtocol.TimeOffRequestStatus})
      type = Igor.Json.parse_field!(json, "type", {:custom, BambooProtocol.TimeOffRequestType})
      %TimeOffRequest{
        id: id,
        employee_id: employee_id,
        name: name,
        start: start,
        end: var_end,
        status: status,
        type: type
      }
    end

    @spec to_json!(t()) :: Igor.Json.json()
    def to_json!(args) do
      %{
        id: id,
        employee_id: employee_id,
        name: name,
        start: start,
        end: var_end,
        status: status,
        type: type
      } = args
      %{
        "id" => Igor.Json.pack_value(id, :string),
        "employeeId" => Igor.Json.pack_value(employee_id, :string),
        "name" => Igor.Json.pack_value(name, :string),
        "start" => Util.Date.to_json!(start),
        "end" => Util.Date.to_json!(var_end),
        "status" => BambooProtocol.TimeOffRequestStatus.to_json!(status),
        "type" => BambooProtocol.TimeOffRequestType.to_json!(type)
      }
    end

  end

  defmodule YesNo do

    @type t ::
      :yes #
    | :no #

    defguard is_yes_no(value) when value === :yes or value === :no

    @spec from_string!(String.t()) :: t()
    def from_string!("yes"), do: :yes
    def from_string!("no"), do: :no

    @spec to_string!(t()) :: String.t()
    def to_string!(:yes), do: "yes"
    def to_string!(:no), do: "no"

    @spec from_json!(String.t()) :: t()
    def from_json!("yes"), do: :yes
    def from_json!("no"), do: :no

    @spec to_json!(t()) :: String.t()
    def to_json!(:yes), do: "yes"
    def to_json!(:no), do: "no"

  end

  defmodule LastChangedFilter do

    @enforce_keys [:include_null, :value]
    defstruct [include_null: nil, value: nil]

    @type t :: %LastChangedFilter{include_null: BambooProtocol.YesNo.t(), value: BambooProtocol.date_time()}

    @spec from_json!(Igor.Json.json()) :: t()
    def from_json!(json) do
      include_null = Igor.Json.parse_field!(json, "includeNull", {:custom, BambooProtocol.YesNo})
      value = Igor.Json.parse_field!(json, "value", {:custom, Util.DateTime})
      %LastChangedFilter{include_null: include_null, value: value}
    end

    @spec to_json!(t()) :: Igor.Json.json()
    def to_json!(args) do
      %{include_null: include_null, value: value} = args
      %{
        "includeNull" => BambooProtocol.YesNo.to_json!(include_null),
        "value" => Util.DateTime.to_json!(value)
      }
    end

  end

  defmodule CustomReportFilterComposition do

    @enforce_keys [:last_changed]
    defstruct [last_changed: nil]

    @type t :: %CustomReportFilterComposition{last_changed: BambooProtocol.LastChangedFilter.t()}

    @spec from_json!(Igor.Json.json()) :: t()
    def from_json!(json) do
      last_changed = Igor.Json.parse_field!(json, "lastChanged", {:custom, BambooProtocol.LastChangedFilter})
      %CustomReportFilterComposition{last_changed: last_changed}
    end

    @spec to_json!(t()) :: Igor.Json.json()
    def to_json!(args) do
      %{last_changed: last_changed} = args
      %{
        "lastChanged" => BambooProtocol.LastChangedFilter.to_json!(last_changed)
      }
    end

  end

  defmodule CustomReportParams do

    defstruct [title: nil, filters: nil, fields: []]

    @type t :: %CustomReportParams{title: String.t() | nil, filters: BambooProtocol.CustomReportFilterComposition.t() | nil, fields: [String.t()]}

    @spec from_json!(Igor.Json.json()) :: t()
    def from_json!(json) do
      title = Igor.Json.parse_field!(json, "title", :string, nil)
      filters = Igor.Json.parse_field!(json, "filters", {:custom, BambooProtocol.CustomReportFilterComposition}, nil)
      fields = Igor.Json.parse_field!(json, "fields", {:list, :string}, [])
      %CustomReportParams{title: title, filters: filters, fields: fields}
    end

    @spec to_json!(t()) :: Igor.Json.json()
    def to_json!(args) do
      %{title: title, filters: filters, fields: fields} = args
      %{}
        |> Igor.Json.pack_field("title", title, :string)
        |> Igor.Json.pack_field("filters", filters, {:custom, BambooProtocol.CustomReportFilterComposition})
        |> Igor.Json.pack_field("fields", fields, {:list, :string})
    end

  end

  defmodule CustomReport do

    defstruct [title: nil, fields: [], employees: []]

    @type t :: %CustomReport{title: String.t() | nil, fields: [BambooProtocol.Field.t()], employees: [BambooProtocol.Employee.t()]}

    @spec from_json!(Igor.Json.json()) :: t()
    def from_json!(json) do
      title = Igor.Json.parse_field!(json, "title", :string, nil)
      fields = Igor.Json.parse_field!(json, "fields", {:list, {:custom, BambooProtocol.Field}}, [])
      employees = Igor.Json.parse_field!(json, "employees", {:list, {:custom, BambooProtocol.Employee}}, [])
      %CustomReport{title: title, fields: fields, employees: employees}
    end

    @spec to_json!(t()) :: Igor.Json.json()
    def to_json!(args) do
      %{title: title, fields: fields, employees: employees} = args
      %{}
        |> Igor.Json.pack_field("title", title, :string)
        |> Igor.Json.pack_field("fields", fields, {:list, {:custom, BambooProtocol.Field}})
        |> Igor.Json.pack_field("employees", employees, {:list, {:custom, BambooProtocol.Employee}})
    end

  end

  defmodule BambooApi do

    @spec get_employee(String.t(), String.t(), String.t(), String.t()) :: BambooProtocol.Employee.t()
    def get_employee(base_url, company_domain, id, authorization) do
      request_headers = [{"accept", "application/json"}, {"authorization", authorization}]
      url = "#{base_url}/#{company_domain}/v1/employees/#{id}?fields=id,displayName,firstName,lastName,preferredName,gender,jobTitle,workEmail,department,location,division,photoUploaded,photoUrl,status,supervisor,supervisorId,supervisorEId,supervisorEmail"
      case HTTPoison.get(url, request_headers, []) do
        {:ok, %HTTPoison.Response{status_code: status_code, body: body}} when status_code < 300 ->
          body
            |> Igor.Json.decode!()
            |> Igor.Json.parse_value!({:custom, BambooProtocol.Employee})
        {:ok, %HTTPoison.Response{status_code: status_code, body: response_body, headers: response_headers}} ->
          raise %Igor.Http.HttpError{status_code: status_code, body: response_body, headers: response_headers}
        {:error, %HTTPoison.Error{reason: _} = e} ->
          raise e
      end
    end

    @spec get_employee_directory(String.t(), String.t(), String.t()) :: BambooProtocol.EmployeeDirectory.t()
    def get_employee_directory(base_url, company_domain, authorization) do
      request_headers = [{"accept", "application/json"}, {"authorization", authorization}]
      url = "#{base_url}/#{company_domain}/v1/employees/directory"
      case HTTPoison.get(url, request_headers, []) do
        {:ok, %HTTPoison.Response{status_code: status_code, body: body}} when status_code < 300 ->
          body
            |> Igor.Json.decode!()
            |> Igor.Json.parse_value!({:custom, BambooProtocol.EmployeeDirectory})
        {:ok, %HTTPoison.Response{status_code: status_code, body: response_body, headers: response_headers}} ->
          raise %Igor.Http.HttpError{status_code: status_code, body: response_body, headers: response_headers}
        {:error, %HTTPoison.Error{reason: _} = e} ->
          raise e
      end
    end

    @spec get_whos_out(String.t(), String.t(), BambooProtocol.date(), BambooProtocol.date(), String.t()) :: [BambooProtocol.TimeOffEntry.t()]
    def get_whos_out(base_url, company_domain, start_date, end_date, authorization) do
      query = Igor.Http.compose_query([{"start", start_date, :string}, {"end", end_date, :string}])
      request_headers = [{"accept", "application/json"}, {"authorization", authorization}]
      url = "#{base_url}/#{company_domain}/v1/time_off/whos_out?#{query}"
      case HTTPoison.get(url, request_headers, []) do
        {:ok, %HTTPoison.Response{status_code: status_code, body: body}} when status_code < 300 ->
          body
            |> Igor.Json.decode!()
            |> Igor.Json.parse_value!({:list, {:custom, BambooProtocol.TimeOffEntry}})
        {:ok, %HTTPoison.Response{status_code: status_code, body: response_body, headers: response_headers}} ->
          raise %Igor.Http.HttpError{status_code: status_code, body: response_body, headers: response_headers}
        {:error, %HTTPoison.Error{reason: _} = e} ->
          raise e
      end
    end

    @spec get_time_off_requests(String.t(), String.t(), BambooProtocol.date(), BambooProtocol.date(), String.t()) :: [BambooProtocol.TimeOffRequest.t()]
    def get_time_off_requests(base_url, company_domain, start_date, end_date, authorization) do
      query = Igor.Http.compose_query([{"start", start_date, :string}, {"end", end_date, :string}])
      request_headers = [{"accept", "application/json"}, {"authorization", authorization}]
      url = "#{base_url}/#{company_domain}/v1/time_off/requests?#{query}"
      case HTTPoison.get(url, request_headers, []) do
        {:ok, %HTTPoison.Response{status_code: status_code, body: body}} when status_code < 300 ->
          body
            |> Igor.Json.decode!()
            |> Igor.Json.parse_value!({:list, {:custom, BambooProtocol.TimeOffRequest}})
        {:ok, %HTTPoison.Response{status_code: status_code, body: response_body, headers: response_headers}} ->
          raise %Igor.Http.HttpError{status_code: status_code, body: response_body, headers: response_headers}
        {:error, %HTTPoison.Error{reason: _} = e} ->
          raise e
      end
    end

    @spec request_custom_report(String.t(), BambooProtocol.CustomReportParams.t(), String.t(), String.t()) :: BambooProtocol.CustomReport.t()
    def request_custom_report(base_url, request_content, company_domain, authorization) do
      request_headers = [{"content-type", "application/json"}, {"accept", "application/json"}, {"authorization", authorization}]
      request_body = request_content
        |> Igor.Json.pack_value({:custom, BambooProtocol.CustomReportParams})
        |> Igor.Json.encode!
      url = "#{base_url}/#{company_domain}/v1/reports/custom?format=JSON"
      case HTTPoison.post(url, request_body, request_headers, []) do
        {:ok, %HTTPoison.Response{status_code: status_code, body: body}} when status_code < 300 ->
          body
            |> Igor.Json.decode!()
            |> Igor.Json.parse_value!({:custom, BambooProtocol.CustomReport})
        {:ok, %HTTPoison.Response{status_code: status_code, body: response_body, headers: response_headers}} ->
          raise %Igor.Http.HttpError{status_code: status_code, body: response_body, headers: response_headers}
        {:error, %HTTPoison.Error{reason: _} = e} ->
          raise e
      end
    end

  end

  @type date :: String.t()

  @type date_time :: String.t()

end
