# @author Igor compiler
# @doc Compiler version: igorc 2.1.4
# DO NOT EDIT THIS FILE - it is machine generated

defmodule DbProtocol.Impl do

  # ----------------------------------------------------------------------------

  @spec to_personnel_account([%Repo.User{}]) :: [%DbProtocol.PersonnelAccount{}]
  def to_personnel_account([]), do: []
  def to_personnel_account([%Repo.User{} | _] = list) do
    list
      |> Repo.preload([:office, {:office, :country}, :groups, :supervisor, :project, :projects, :role, {:highlights, :project}, {:highlights, :highlight}])
      |> Enum.map(&to_personnel_account/1)
  end
  @spec to_personnel_account(%Repo.User{}) :: %DbProtocol.PersonnelAccount{}
  def to_personnel_account(%Repo.User{} = rec) do
    rec = rec |> Repo.preload([:office, {:office, :country}, :groups, :supervisor, :project, :projects, :role, {:highlights, :project}, {:highlights, :highlight}])
    %DbProtocol.PersonnelAccount{
      id: rec.id,
      rev: rec.rev,
      username: rec.username,
      name: rec.name,
      email: rec.email,
      phone: rec.phone,
      office_id: rec.office_id,
      office_name: rec.office && rec.office.name,
      office_country_alpha2: rec.office && rec.office.country && rec.office.country.alpha2,
      office_country_name: rec.office && rec.office.country && rec.office.country.name,
      department: rec.department,
      job_title: rec.job_title,
      is_blocked: rec.is_blocked,
      is_deleted: rec.is_deleted,
      is_superadmin: (fn x -> Enum.any?(x.groups, & &1.is_superadmin) end).(rec),
      is_office_manager: rec.is_office_manager,
      supervisor_id: rec.supervisor_id,
      location: rec.location,
      supervisor_username: rec.supervisor && rec.supervisor.username,
      supervisor_name: rec.supervisor && rec.supervisor.name,
      allocated_to_project_id: rec.project && rec.project.id,
      allocated_to_project_name: rec.project && rec.project.title,
      linked_to_projects: (fn x -> x.projects |> Enum.map(& Util.take(&1, project_id: :project_id, since: :created_at)) end).(rec),
      role_id: rec.role_id,
      role_code: rec.role && rec.role.code,
      role_title: rec.role && rec.role.title,
      highlights: (fn x -> x.highlights |> Enum.group_by(& &1.project.id, & Util.take(&1, code: [:highlight, :code], title: [:highlight, :title], since: :created_at, project: [:project, :title])) end).(rec),
      hired_at: rec.hired_at,
      fired_at: rec.fired_at,
      created_at: rec.created_at,
      updated_at: rec.updated_at,
    }
  end

  # ----------------------------------------------------------------------------

  @spec to_personnel_group([%Repo.Group{}]) :: [%DbProtocol.PersonnelGroup{}]
  def to_personnel_group([]), do: []
  def to_personnel_group([%Repo.Group{} | _] = list) do
    list
      |> Repo.preload([:users])
      |> Enum.map(&to_personnel_group/1)
  end
  @spec to_personnel_group(%Repo.Group{}) :: %DbProtocol.PersonnelGroup{}
  def to_personnel_group(%Repo.Group{} = rec) do
    rec = rec |> Repo.preload([:users])
    %DbProtocol.PersonnelGroup{
      id: rec.id,
      rev: rec.rev,
      name: rec.name,
      description: rec.description,
      is_deleted: rec.is_deleted,
      members: (fn x -> Enum.map(x.users, & &1.username) end).(rec),
      member_count: (fn x -> length(x.users) end).(rec),
      is_superadmin: rec.is_superadmin,
      created_at: rec.created_at,
      updated_at: rec.updated_at,
    }
  end

  # ----------------------------------------------------------------------------

  @spec to_country([%Repo.Country{}]) :: [%DbProtocol.Country{}]
  def to_country([]), do: []
  def to_country([%Repo.Country{} | _] = list) do
    list
      |> Enum.map(&to_country/1)
  end
  @spec to_country(%Repo.Country{}) :: %DbProtocol.Country{}
  def to_country(%Repo.Country{} = rec) do
    %DbProtocol.Country{
      id: rec.id,
      name: rec.name,
      alpha2: rec.alpha2,
      alpha3: rec.alpha3,
      created_at: rec.created_at,
    }
  end

  # ----------------------------------------------------------------------------

  @spec to_office([%Repo.Office{}]) :: [%DbProtocol.Office{}]
  def to_office([]), do: []
  def to_office([%Repo.Office{} | _] = list) do
    list
      |> Repo.preload([:country, :group, :roles])
      |> Enum.map(&to_office/1)
  end
  @spec to_office(%Repo.Office{}) :: %DbProtocol.Office{}
  def to_office(%Repo.Office{} = rec) do
    rec = rec |> Repo.preload([:country, :group, :roles])
    %DbProtocol.Office{
      id: rec.id,
      rev: rec.rev,
      name: rec.name,
      country_id: rec.country_id,
      country_alpha2: rec.country && rec.country.alpha2,
      country_name: rec.country && rec.country.name,
      city: rec.city,
      address: rec.address,
      postal_code: rec.postal_code,
      group_id: rec.group_id,
      group_name: rec.group && rec.group.name,
      allowed_roles: (fn x -> Enum.map(x.roles, & &1.role_id) end).(rec),
      visma_country: rec.visma_country,
      visma_company_id: rec.visma_company_id,
      created_at: rec.created_at,
      updated_at: rec.updated_at,
    }
  end

  # ----------------------------------------------------------------------------

  @spec to_project([%Repo.Project{}]) :: [%DbProtocol.Project{}]
  def to_project([]), do: []
  def to_project([%Repo.Project{} | _] = list) do
    list
      |> Repo.preload([:supervisor, :leading_office])
      |> Enum.map(&to_project/1)
  end
  @spec to_project(%Repo.Project{}) :: %DbProtocol.Project{}
  def to_project(%Repo.Project{} = rec) do
    rec = rec |> Repo.preload([:supervisor, :leading_office])
    %DbProtocol.Project{
      id: rec.id,
      rev: rec.rev,
      title: rec.title,
      key: rec.key,
      color: rec.color,
      supervisor_id: rec.supervisor_id,
      supervisor_username: rec.supervisor && rec.supervisor.username,
      supervisor_name: rec.supervisor && rec.supervisor.name,
      leading_office_id: rec.leading_office_id,
      leading_office_name: rec.leading_office && rec.leading_office.name,
      finance_code: rec.finance_code,
      invoiceable: rec.invoiceable,
      is_archived: (rec.is_archived) || false,
      task_code: rec.task_code,
      started_at: rec.started_at,
      finished_at: rec.finished_at,
      created_at: rec.created_at,
      updated_at: rec.updated_at,
    }
  end

  # ----------------------------------------------------------------------------

  @spec to_timesheet_cell([%Repo.TimeCell{}]) :: [%DbProtocol.TimesheetCell{}]
  def to_timesheet_cell([]), do: []
  def to_timesheet_cell([%Repo.TimeCell{} | _] = list) do
    list
      |> Repo.preload([:user, :project])
      |> Enum.map(&to_timesheet_cell/1)
  end
  @spec to_timesheet_cell(%Repo.TimeCell{}) :: %DbProtocol.TimesheetCell{}
  def to_timesheet_cell(%Repo.TimeCell{} = rec) do
    rec = rec |> Repo.preload([:user, :project])
    %DbProtocol.TimesheetCell{
      id: rec.id,
      personnel_id: rec.user.id,
      personnel_username: rec.user.username,
      personnel_name: rec.user.name,
      is_protected: rec.is_protected,
      project_id: rec.project_id,
      project_name: rec.project && rec.project.title,
      time_off: rec.time_off,
      cell_date_iso: (fn x -> Date.to_iso8601(x.slot_date) end).(rec),
      cell_date: rec.slot_date,
      comment: rec.comment,
      created_at: rec.created_at,
      updated_at: rec.updated_at,
    }
  end

  # ----------------------------------------------------------------------------

  @spec to_role([%Repo.Role{}]) :: [%DbProtocol.Role{}]
  def to_role([]), do: []
  def to_role([%Repo.Role{} | _] = list) do
    list
      |> Enum.map(&to_role/1)
  end
  @spec to_role(%Repo.Role{}) :: %DbProtocol.Role{}
  def to_role(%Repo.Role{} = rec) do
    %DbProtocol.Role{
      id: rec.id,
      rev: rec.rev,
      code: rec.code,
      title: rec.title,
      created_at: rec.created_at,
      updated_at: rec.updated_at,
    }
  end

  # ----------------------------------------------------------------------------

  @spec to_team([%Repo.Team{}]) :: [%DbProtocol.Team{}]
  def to_team([]), do: []
  def to_team([%Repo.Team{} | _] = list) do
    list
      |> Repo.preload([:users, :owner])
      |> Enum.map(&to_team/1)
  end
  @spec to_team(%Repo.Team{}) :: %DbProtocol.Team{}
  def to_team(%Repo.Team{} = rec) do
    rec = rec |> Repo.preload([:users, :owner])
    %DbProtocol.Team{
      id: rec.id,
      rev: rec.rev,
      title: rec.title,
      members: (fn x -> Enum.map(x.users, & &1.username) end).(rec),
      created_by: rec.created_by,
      created_by_username: rec.owner && rec.owner.username,
      created_by_name: rec.owner && rec.owner.name,
      created_at: rec.created_at,
      updated_at: rec.updated_at,
    }
  end

  # ----------------------------------------------------------------------------

  @spec to_history_entry([%Repo.History{}]) :: [%DbProtocol.HistoryEntry{}]
  def to_history_entry([]), do: []
  def to_history_entry([%Repo.History{} | _] = list) do
    list
      |> Enum.map(&to_history_entry/1)
  end
  @spec to_history_entry(%Repo.History{}) :: %DbProtocol.HistoryEntry{}
  def to_history_entry(%Repo.History{} = rec) do
    %DbProtocol.HistoryEntry{
      id: rec.id,
      actor: rec.actor,
      actor_id: rec.actor_id,
      actor_name: rec.actor_name,
      actor_username: rec.actor_username,
      entity: rec.entity,
      entity_id: rec.entity_id,
      entity_param: rec.entity_param,
      operation: rec.operation,
      is_bulk: rec.is_bulk,
      properties: rec.properties,
      result: rec.result,
      comment: rec.comment,
      created_at: rec.created_at,
    }
  end

  # ----------------------------------------------------------------------------

  @spec to_visma_report([%Repo.VismaReport{}]) :: [%DbProtocol.VismaReport{}]
  def to_visma_report([]), do: []
  def to_visma_report([%Repo.VismaReport{} | _] = list) do
    list
      |> Enum.map(&to_visma_report/1)
  end
  @spec to_visma_report(%Repo.VismaReport{}) :: %DbProtocol.VismaReport{}
  def to_visma_report(%Repo.VismaReport{} = rec) do
    %DbProtocol.VismaReport{
      id: rec.id,
      office_id: rec.office_id,
      office_name: rec.office_name,
      year: rec.year,
      month: rec.month,
      comment: rec.comment,
      omit_ids: (rec.omit_ids) || [],
      omit_uids: (rec.omit_uids) || [],
      created_by: rec.created_by,
      created_by_username: rec.created_by_username,
      created_by_name: rec.created_by_name,
      updated_by: rec.updated_by,
      updated_by_username: rec.updated_by_username,
      updated_by_name: rec.updated_by_name,
      delivery_task_id: rec.delivery_task_id,
      delivery_data: rec.delivery_data,
      delivery_status: rec.delivery_status,
      delivered_at: rec.delivered_at,
      created_at: rec.created_at,
      updated_at: rec.updated_at,
    }
  end

  # ----------------------------------------------------------------------------

  @spec to_highlight([%Repo.Highlight{}]) :: [%DbProtocol.Highlight{}]
  def to_highlight([]), do: []
  def to_highlight([%Repo.Highlight{} | _] = list) do
    list
      |> Enum.map(&to_highlight/1)
  end
  @spec to_highlight(%Repo.Highlight{}) :: %DbProtocol.Highlight{}
  def to_highlight(%Repo.Highlight{} = rec) do
    %DbProtocol.Highlight{
      id: rec.id,
      rev: rec.rev,
      code: rec.code,
      title: rec.title,
      created_at: rec.created_at,
      updated_at: rec.updated_at,
    }
  end

  # ----------------------------------------------------------------------------
  # internal functions
  # ----------------------------------------------------------------------------

end
