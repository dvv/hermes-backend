# @author Igor compiler
# @doc Compiler version: igorc 2.1.4
# DO NOT EDIT THIS FILE - it is machine generated

defmodule WebProtocol.HermesEmployeeService do

  defmodule GetEmployee do

    require Logger
    import Plug.Conn

    def init(opts), do: opts

    def call(%{method: method} = conn, _opts), do: handle_method(method, conn)

    defp handle_method("GET", conn) do
      try do
        id = Igor.Json.parse_field!(conn.path_params, "id", :long)
        {conn, id}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, id} ->
          handle_get(conn, id)
      end
    end
    defp handle_method(_, conn) do
      conn
        |> put_resp_header("allow", "GET")
        |> send_resp(405, "")
    end

    defp handle_get(conn, id) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employee", args: [id, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesEmployeeService.Impl.get_employee(id, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employee", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DbProtocol.PersonnelAccount})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employee", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e in DataProtocol.NotFoundError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employee", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.NotFoundError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(404, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employee", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

  end

  defmodule GetEmployeeByUsername do

    require Logger
    import Plug.Conn

    def init(opts), do: opts

    def call(%{method: method} = conn, _opts), do: handle_method(method, conn)

    defp handle_method("GET", conn) do
      try do
        username = Igor.Json.parse_field!(conn.path_params, "username", :string)
        {conn, username}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, username} ->
          handle_get(conn, username)
      end
    end
    defp handle_method(_, conn) do
      conn
        |> put_resp_header("allow", "GET")
        |> send_resp(405, "")
    end

    defp handle_get(conn, username) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employee_by_username", args: [username, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesEmployeeService.Impl.get_employee_by_username(username, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employee_by_username", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DbProtocol.PersonnelAccount})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employee_by_username", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e in DataProtocol.NotFoundError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employee_by_username", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.NotFoundError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(404, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employee_by_username", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

  end

  defmodule GetEmployees do

    require Logger
    import Plug.Conn

    def init(opts), do: opts

    def call(%{method: method} = conn, _opts), do: handle_method(method, conn)

    defp handle_method("GET", conn) do
      try do
        conn = fetch_query_params(conn)
        needle = Igor.Json.parse_field!(conn.query_params, "needle", {:option, :string})
        order_by = Igor.Json.parse_field!(conn.query_params, "order_by", {:custom, WebProtocol.PersonnelAccountOrderBy})
        order_dir = Igor.Json.parse_field!(conn.query_params, "order_dir", {:custom, DataProtocol.OrderDirection})
        offset = Igor.Json.parse_field!(conn.query_params, "offset", :int)
        limit = Igor.Json.parse_field!(conn.query_params, "limit", :int)
        {conn, needle, order_by, order_dir, offset, limit}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, needle, order_by, order_dir, offset, limit} ->
          handle_get(conn, needle, order_by, order_dir, offset, limit)
      end
    end
    defp handle_method(_, conn) do
      conn
        |> put_resp_header("allow", "GET")
        |> send_resp(405, "")
    end

    defp handle_get(conn, needle, order_by, order_dir, offset, limit) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employees", args: [needle, order_by, order_dir, offset, limit, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesEmployeeService.Impl.get_employees(needle, order_by, order_dir, offset, limit, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employees", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DataProtocol.CollectionSlice, {{:custom, DbProtocol.PersonnelAccount}}})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employees", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employees", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

  end

  defmodule GetEmployeesByOffice do

    require Logger
    import Plug.Conn

    def init(opts), do: opts

    def call(%{method: method} = conn, _opts), do: handle_method(method, conn)

    defp handle_method("GET", conn) do
      try do
        office_id = Igor.Json.parse_field!(conn.path_params, "office_id", :long)
        {conn, office_id}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, office_id} ->
          handle_get(conn, office_id)
      end
    end
    defp handle_method(_, conn) do
      conn
        |> put_resp_header("allow", "GET")
        |> send_resp(405, "")
    end

    defp handle_get(conn, office_id) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employees_by_office", args: [office_id, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesEmployeeService.Impl.get_employees_by_office(office_id, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employees_by_office", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DataProtocol.Collection, {{:custom, DbProtocol.PersonnelAccount}}})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employees_by_office", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e in DataProtocol.NotFoundError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employees_by_office", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.NotFoundError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(404, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employees_by_office", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

  end

  defmodule GetEmployeesByProject do

    require Logger
    import Plug.Conn

    def init(opts), do: opts

    def call(%{method: method} = conn, _opts), do: handle_method(method, conn)

    defp handle_method("GET", conn) do
      try do
        conn = fetch_query_params(conn)
        project_id = Igor.Json.parse_field!(conn.path_params, "project_id", :long)
        since = Igor.Json.parse_field!(conn.query_params, "since", {:option, {:custom, Util.Date}})
        till = Igor.Json.parse_field!(conn.query_params, "till", {:option, {:custom, Util.Date}})
        {conn, project_id, since, till}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, project_id, since, till} ->
          handle_get(conn, project_id, since, till)
      end
    end
    defp handle_method(_, conn) do
      conn
        |> put_resp_header("allow", "GET")
        |> send_resp(405, "")
    end

    defp handle_get(conn, project_id, since, till) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employees_by_project", args: [project_id, since, till, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesEmployeeService.Impl.get_employees_by_project(project_id, since, till, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employees_by_project", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DataProtocol.Collection, {{:custom, DbProtocol.PersonnelAccount}}})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employees_by_project", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e in DataProtocol.NotFoundError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employees_by_project", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.NotFoundError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(404, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.get_employees_by_project", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

  end

  defmodule EmployeeAlloc do

    require Logger
    import Plug.Conn

    def init(opts), do: opts

    def call(%{method: method} = conn, _opts), do: handle_method(method, conn)

    defp handle_method("PUT", conn) do
      try do
        {:ok, body, conn} = read_body(conn)
        request_content = body
          |> Igor.Json.decode!()
          |> Igor.Json.parse_value!({:custom, WebProtocol.EmployeeAlloc})
        id = Igor.Json.parse_field!(conn.path_params, "id", :long)
        {conn, request_content, id}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, request_content, id} ->
          handle_put(conn, request_content, id)
      end
    end
    defp handle_method("DELETE", conn) do
      try do
        id = Igor.Json.parse_field!(conn.path_params, "id", :long)
        {conn, id}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, id} ->
          handle_delete(conn, id)
      end
    end
    defp handle_method(_, conn) do
      conn
        |> put_resp_header("allow", "PUT, DELETE")
        |> send_resp(405, "")
    end

    defp handle_put(conn, request_content, id) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesEmployeeService.Impl.allocate_employee", args: [request_content, id, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesEmployeeService.Impl.allocate_employee(request_content, id, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesEmployeeService.Impl.allocate_employee", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DbProtocol.PersonnelAccount})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.BadRequestError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.allocate_employee", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.BadRequestError, {{:custom, WebProtocol.EmployeeAllocError}}})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(400, body)
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.allocate_employee", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e in DataProtocol.NotFoundError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.allocate_employee", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.NotFoundError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(404, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.allocate_employee", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

    defp handle_delete(conn, id) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesEmployeeService.Impl.deallocate_employee", args: [id, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesEmployeeService.Impl.deallocate_employee(id, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesEmployeeService.Impl.deallocate_employee", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DbProtocol.PersonnelAccount})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.deallocate_employee", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e in DataProtocol.NotFoundError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.deallocate_employee", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.NotFoundError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(404, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.deallocate_employee", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

  end

  defmodule EmployeeHighlight do

    require Logger
    import Plug.Conn

    def init(opts), do: opts

    def call(%{method: method} = conn, _opts), do: handle_method(method, conn)

    defp handle_method("PUT", conn) do
      try do
        {:ok, body, conn} = read_body(conn)
        request_content = body
          |> Igor.Json.decode!()
          |> Igor.Json.parse_value!({:custom, CommonProtocol.Empty})
        personnel_id = Igor.Json.parse_field!(conn.path_params, "personnel_id", :long)
        project_id = Igor.Json.parse_field!(conn.path_params, "project_id", :long)
        highlight_id = Igor.Json.parse_field!(conn.path_params, "highlight_id", :long)
        {conn, request_content, personnel_id, project_id, highlight_id}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, request_content, personnel_id, project_id, highlight_id} ->
          handle_put(conn, request_content, personnel_id, project_id, highlight_id)
      end
    end
    defp handle_method("DELETE", conn) do
      try do
        personnel_id = Igor.Json.parse_field!(conn.path_params, "personnel_id", :long)
        project_id = Igor.Json.parse_field!(conn.path_params, "project_id", :long)
        highlight_id = Igor.Json.parse_field!(conn.path_params, "highlight_id", :long)
        {conn, personnel_id, project_id, highlight_id}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, personnel_id, project_id, highlight_id} ->
          handle_delete(conn, personnel_id, project_id, highlight_id)
      end
    end
    defp handle_method(_, conn) do
      conn
        |> put_resp_header("allow", "PUT, DELETE")
        |> send_resp(405, "")
    end

    defp handle_put(conn, request_content, personnel_id, project_id, highlight_id) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesEmployeeService.Impl.add_employee_highlight", args: [request_content, personnel_id, project_id, highlight_id, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesEmployeeService.Impl.add_employee_highlight(request_content, personnel_id, project_id, highlight_id, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesEmployeeService.Impl.add_employee_highlight", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DbProtocol.PersonnelAccount})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.add_employee_highlight", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e in DataProtocol.NotFoundError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.add_employee_highlight", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.NotFoundError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(404, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.add_employee_highlight", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

    defp handle_delete(conn, personnel_id, project_id, highlight_id) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesEmployeeService.Impl.remove_employee_highlight", args: [personnel_id, project_id, highlight_id, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesEmployeeService.Impl.remove_employee_highlight(personnel_id, project_id, highlight_id, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesEmployeeService.Impl.remove_employee_highlight", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DbProtocol.PersonnelAccount})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.remove_employee_highlight", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e in DataProtocol.NotFoundError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.remove_employee_highlight", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.NotFoundError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(404, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.remove_employee_highlight", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

  end

  defmodule EmployeeProject do

    require Logger
    import Plug.Conn

    def init(opts), do: opts

    def call(%{method: method} = conn, _opts), do: handle_method(method, conn)

    defp handle_method("PUT", conn) do
      try do
        {:ok, body, conn} = read_body(conn)
        request_content = body
          |> Igor.Json.decode!()
          |> Igor.Json.parse_value!({:custom, CommonProtocol.Empty})
        personnel_id = Igor.Json.parse_field!(conn.path_params, "personnel_id", :long)
        project_id = Igor.Json.parse_field!(conn.path_params, "project_id", :long)
        {conn, request_content, personnel_id, project_id}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, request_content, personnel_id, project_id} ->
          handle_put(conn, request_content, personnel_id, project_id)
      end
    end
    defp handle_method("DELETE", conn) do
      try do
        personnel_id = Igor.Json.parse_field!(conn.path_params, "personnel_id", :long)
        project_id = Igor.Json.parse_field!(conn.path_params, "project_id", :long)
        {conn, personnel_id, project_id}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, personnel_id, project_id} ->
          handle_delete(conn, personnel_id, project_id)
      end
    end
    defp handle_method(_, conn) do
      conn
        |> put_resp_header("allow", "PUT, DELETE")
        |> send_resp(405, "")
    end

    defp handle_put(conn, request_content, personnel_id, project_id) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesEmployeeService.Impl.link_employee_to_project", args: [request_content, personnel_id, project_id, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesEmployeeService.Impl.link_employee_to_project(request_content, personnel_id, project_id, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesEmployeeService.Impl.link_employee_to_project", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DbProtocol.PersonnelAccount})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.link_employee_to_project", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e in DataProtocol.NotFoundError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.link_employee_to_project", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.NotFoundError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(404, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.link_employee_to_project", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

    defp handle_delete(conn, personnel_id, project_id) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesEmployeeService.Impl.unlink_employee_from_project", args: [personnel_id, project_id, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesEmployeeService.Impl.unlink_employee_from_project(personnel_id, project_id, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesEmployeeService.Impl.unlink_employee_from_project", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DbProtocol.PersonnelAccount})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.unlink_employee_from_project", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e in DataProtocol.NotFoundError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.unlink_employee_from_project", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.NotFoundError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(404, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesEmployeeService.Impl.unlink_employee_from_project", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

  end

  @doc """
  Get employee by ID
  """
  @callback get_employee(integer, session :: any()) :: DbProtocol.PersonnelAccount.t()

  @doc """
  Get employee by username
  """
  @callback get_employee_by_username(String.t(), session :: any()) :: DbProtocol.PersonnelAccount.t()

  @doc """
  Get employees
  """
  @callback get_employees(String.t() | nil, WebProtocol.PersonnelAccountOrderBy.t(), DataProtocol.OrderDirection.t(), integer, integer, session :: any()) :: DataProtocol.CollectionSlice.t(DbProtocol.PersonnelAccount.t())

  @doc """
  Get all employee for supplied office
  """
  @callback get_employees_by_office(integer, session :: any()) :: DataProtocol.Collection.t(DbProtocol.PersonnelAccount.t())

  @doc """
  Get all employee assigned to supplied project
  """
  @callback get_employees_by_project(integer, CommonProtocol.date() | nil, CommonProtocol.date() | nil, session :: any()) :: DataProtocol.Collection.t(DbProtocol.PersonnelAccount.t())

  @doc """
  Allocate employee to project
  """
  @callback allocate_employee(WebProtocol.EmployeeAlloc.t(), integer, session :: any()) :: DbProtocol.PersonnelAccount.t()

  @doc """
  Deallocate employee from project
  """
  @callback deallocate_employee(integer, session :: any()) :: DbProtocol.PersonnelAccount.t()

  @doc """
  Add an employee highlight to particular project
  """
  @callback add_employee_highlight(CommonProtocol.Empty.t(), integer, integer, integer, session :: any()) :: DbProtocol.PersonnelAccount.t()

  @doc """
  Remove an employee highlight from particular project
  """
  @callback remove_employee_highlight(integer, integer, integer, session :: any()) :: DbProtocol.PersonnelAccount.t()

  @doc """
  Add an employee link to particular project
  """
  @callback link_employee_to_project(CommonProtocol.Empty.t(), integer, integer, session :: any()) :: DbProtocol.PersonnelAccount.t()

  @doc """
  Remove an employee link to particular project
  """
  @callback unlink_employee_from_project(integer, integer, session :: any()) :: DbProtocol.PersonnelAccount.t()

end
