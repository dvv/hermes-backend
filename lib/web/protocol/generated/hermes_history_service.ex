# @author Igor compiler
# @doc Compiler version: igorc 2.1.4
# DO NOT EDIT THIS FILE - it is machine generated

defmodule WebProtocol.HermesHistoryService do

  defmodule History do

    require Logger
    import Plug.Conn

    def init(opts), do: opts

    def call(%{method: method} = conn, _opts), do: handle_method(method, conn)

    defp handle_method("GET", conn) do
      try do
        conn = fetch_query_params(conn)
        entity = Igor.Json.parse_field!(conn.path_params, "entity", :string)
        needle = Igor.Json.parse_field!(conn.query_params, "needle", {:option, :string})
        order_by = Igor.Json.parse_field!(conn.query_params, "order_by", {:custom, WebProtocol.HistoryEntryOrderBy})
        order_dir = Igor.Json.parse_field!(conn.query_params, "order_dir", {:custom, DataProtocol.OrderDirection})
        offset = Igor.Json.parse_field!(conn.query_params, "offset", :int)
        limit = Igor.Json.parse_field!(conn.query_params, "limit", :int)
        {conn, entity, needle, order_by, order_dir, offset, limit}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, entity, needle, order_by, order_dir, offset, limit} ->
          handle_get(conn, entity, needle, order_by, order_dir, offset, limit)
      end
    end
    defp handle_method(_, conn) do
      conn
        |> put_resp_header("allow", "GET")
        |> send_resp(405, "")
    end

    defp handle_get(conn, entity, needle, order_by, order_dir, offset, limit) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_history", args: [entity, needle, order_by, order_dir, offset, limit, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesHistoryService.Impl.get_history(entity, needle, order_by, order_dir, offset, limit, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_history", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DataProtocol.CollectionSlice, {{:custom, DbProtocol.HistoryEntry}}})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_history", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_history", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

  end

  defmodule EmployeeRoleChangeHistory do

    require Logger
    import Plug.Conn

    def init(opts), do: opts

    def call(%{method: method} = conn, _opts), do: handle_method(method, conn)

    defp handle_method("GET", conn) do
      try do
        personnel_id = Igor.Json.parse_field!(conn.path_params, "personnel_id", :long)
        {conn, personnel_id}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, personnel_id} ->
          handle_get(conn, personnel_id)
      end
    end
    defp handle_method(_, conn) do
      conn
        |> put_resp_header("allow", "GET")
        |> send_resp(405, "")
    end

    defp handle_get(conn, personnel_id) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_employee_role_change_history", args: [personnel_id, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesHistoryService.Impl.get_employee_role_change_history(personnel_id, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_employee_role_change_history", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DataProtocol.Collection, {{:custom, DbProtocol.HistoryEntry}}})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_employee_role_change_history", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e in DataProtocol.NotFoundError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_employee_role_change_history", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.NotFoundError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(404, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_employee_role_change_history", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

  end

  defmodule EmployeeRoleChangeHistoryForOffice do

    require Logger
    import Plug.Conn

    def init(opts), do: opts

    def call(%{method: method} = conn, _opts), do: handle_method(method, conn)

    defp handle_method("GET", conn) do
      try do
        office_id = Igor.Json.parse_field!(conn.path_params, "office_id", :long)
        {conn, office_id}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, office_id} ->
          handle_get(conn, office_id)
      end
    end
    defp handle_method(_, conn) do
      conn
        |> put_resp_header("allow", "GET")
        |> send_resp(405, "")
    end

    defp handle_get(conn, office_id) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_employee_role_change_history_for_office", args: [office_id, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesHistoryService.Impl.get_employee_role_change_history_for_office(office_id, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_employee_role_change_history_for_office", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DataProtocol.Collection, {{:custom, DbProtocol.HistoryEntry}}})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_employee_role_change_history_for_office", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e in DataProtocol.NotFoundError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_employee_role_change_history_for_office", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.NotFoundError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(404, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_employee_role_change_history_for_office", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

  end

  defmodule CustomTimesheetHistory do

    require Logger
    import Plug.Conn

    def init(opts), do: opts

    def call(%{method: method} = conn, _opts), do: handle_method(method, conn)

    defp handle_method("GET", conn) do
      try do
        conn = fetch_query_params(conn)
        cell_ids = Igor.Json.parse_field!(conn.query_params, "cell_ids", {:list, ",", :long})
        {conn, cell_ids}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, cell_ids} ->
          handle_get(conn, cell_ids)
      end
    end
    defp handle_method(_, conn) do
      conn
        |> put_resp_header("allow", "GET")
        |> send_resp(405, "")
    end

    defp handle_get(conn, cell_ids) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_custom_timesheet_history", args: [cell_ids, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesHistoryService.Impl.get_custom_timesheet_history(cell_ids, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_custom_timesheet_history", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DataProtocol.Collection, {{:custom, DbProtocol.HistoryEntry}}})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_custom_timesheet_history", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_custom_timesheet_history", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

  end

  defmodule MonthlyEmployeeTimesheetHistory do

    require Logger
    import Plug.Conn

    def init(opts), do: opts

    def call(%{method: method} = conn, _opts), do: handle_method(method, conn)

    defp handle_method("GET", conn) do
      try do
        year = Igor.Json.parse_field!(conn.path_params, "year", :int)
        month = Igor.Json.parse_field!(conn.path_params, "month", :int)
        personnel_id = Igor.Json.parse_field!(conn.path_params, "personnel_id", :long)
        {conn, year, month, personnel_id}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, year, month, personnel_id} ->
          handle_get(conn, year, month, personnel_id)
      end
    end
    defp handle_method(_, conn) do
      conn
        |> put_resp_header("allow", "GET")
        |> send_resp(405, "")
    end

    defp handle_get(conn, year, month, personnel_id) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_employee", args: [year, month, personnel_id, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_employee(year, month, personnel_id, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_employee", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DataProtocol.Collection, {{:custom, DbProtocol.HistoryEntry}}})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_employee", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e in DataProtocol.NotFoundError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_employee", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.NotFoundError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(404, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_employee", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

  end

  defmodule MonthlyProjectTimesheetHistory do

    require Logger
    import Plug.Conn

    def init(opts), do: opts

    def call(%{method: method} = conn, _opts), do: handle_method(method, conn)

    defp handle_method("GET", conn) do
      try do
        year = Igor.Json.parse_field!(conn.path_params, "year", :int)
        month = Igor.Json.parse_field!(conn.path_params, "month", :int)
        project_id = Igor.Json.parse_field!(conn.path_params, "project_id", :long)
        {conn, year, month, project_id}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, year, month, project_id} ->
          handle_get(conn, year, month, project_id)
      end
    end
    defp handle_method(_, conn) do
      conn
        |> put_resp_header("allow", "GET")
        |> send_resp(405, "")
    end

    defp handle_get(conn, year, month, project_id) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_project", args: [year, month, project_id, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_project(year, month, project_id, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_project", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DataProtocol.Collection, {{:custom, DbProtocol.HistoryEntry}}})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_project", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e in DataProtocol.NotFoundError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_project", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.NotFoundError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(404, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_project", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

  end

  defmodule MonthlyOfficeTimesheetHistory do

    require Logger
    import Plug.Conn

    def init(opts), do: opts

    def call(%{method: method} = conn, _opts), do: handle_method(method, conn)

    defp handle_method("GET", conn) do
      try do
        year = Igor.Json.parse_field!(conn.path_params, "year", :int)
        month = Igor.Json.parse_field!(conn.path_params, "month", :int)
        office_id = Igor.Json.parse_field!(conn.path_params, "office_id", :long)
        {conn, year, month, office_id}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, year, month, office_id} ->
          handle_get(conn, year, month, office_id)
      end
    end
    defp handle_method(_, conn) do
      conn
        |> put_resp_header("allow", "GET")
        |> send_resp(405, "")
    end

    defp handle_get(conn, year, month, office_id) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_office", args: [year, month, office_id, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_office(year, month, office_id, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_office", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DataProtocol.Collection, {{:custom, DbProtocol.HistoryEntry}}})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_office", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e in DataProtocol.NotFoundError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_office", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.NotFoundError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(404, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_office", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

  end

  defmodule MonthlyTeamTimesheetHistory do

    require Logger
    import Plug.Conn

    def init(opts), do: opts

    def call(%{method: method} = conn, _opts), do: handle_method(method, conn)

    defp handle_method("GET", conn) do
      try do
        year = Igor.Json.parse_field!(conn.path_params, "year", :int)
        month = Igor.Json.parse_field!(conn.path_params, "month", :int)
        team_id = Igor.Json.parse_field!(conn.path_params, "team_id", :long)
        {conn, year, month, team_id}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, year, month, team_id} ->
          handle_get(conn, year, month, team_id)
      end
    end
    defp handle_method(_, conn) do
      conn
        |> put_resp_header("allow", "GET")
        |> send_resp(405, "")
    end

    defp handle_get(conn, year, month, team_id) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_team", args: [year, month, team_id, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_team(year, month, team_id, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_team", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DataProtocol.Collection, {{:custom, DbProtocol.HistoryEntry}}})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_team", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e in DataProtocol.NotFoundError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_team", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.NotFoundError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(404, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesHistoryService.Impl.get_monthly_timesheet_history_for_team", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

  end

  @doc """
  Get action history
  """
  @callback get_history(String.t(), String.t() | nil, WebProtocol.HistoryEntryOrderBy.t(), DataProtocol.OrderDirection.t(), integer, integer, session :: any()) :: DataProtocol.CollectionSlice.t(DbProtocol.HistoryEntry.t())

  @doc """
  Get employee role change history
  """
  @callback get_employee_role_change_history(integer, session :: any()) :: DataProtocol.Collection.t(DbProtocol.HistoryEntry.t())

  @doc """
  Get employee role change history for particular office
  """
  @callback get_employee_role_change_history_for_office(integer, session :: any()) :: DataProtocol.Collection.t(DbProtocol.HistoryEntry.t())

  @doc """
  Get action history for particular timesheet сells
  """
  @callback get_custom_timesheet_history([integer], session :: any()) :: DataProtocol.Collection.t(DbProtocol.HistoryEntry.t())

  @doc """
  Get monthly history of timesheet for specified year and month and employee
  """
  @callback get_monthly_timesheet_history_for_employee(integer, integer, integer, session :: any()) :: DataProtocol.Collection.t(DbProtocol.HistoryEntry.t())

  @doc """
  Get monthly history of timesheet for specified year and month and project
  """
  @callback get_monthly_timesheet_history_for_project(integer, integer, integer, session :: any()) :: DataProtocol.Collection.t(DbProtocol.HistoryEntry.t())

  @doc """
  Get monthly history of timesheet for specified year and month and office
  """
  @callback get_monthly_timesheet_history_for_office(integer, integer, integer, session :: any()) :: DataProtocol.Collection.t(DbProtocol.HistoryEntry.t())

  @doc """
  Get monthly history of timesheet for specified year and month and team
  """
  @callback get_monthly_timesheet_history_for_team(integer, integer, integer, session :: any()) :: DataProtocol.Collection.t(DbProtocol.HistoryEntry.t())

end
