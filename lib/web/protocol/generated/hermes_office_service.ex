# @author Igor compiler
# @doc Compiler version: igorc 2.1.4
# DO NOT EDIT THIS FILE - it is machine generated

defmodule WebProtocol.HermesOfficeService do

  defmodule Offices do

    require Logger
    import Plug.Conn

    def init(opts), do: opts

    def call(%{method: method} = conn, _opts), do: handle_method(method, conn)

    defp handle_method("GET", conn) do
      handle_get(conn)
    end
    defp handle_method("POST", conn) do
      try do
        {:ok, body, conn} = read_body(conn)
        request_content = body
          |> Igor.Json.decode!()
          |> Igor.Json.parse_value!({:custom, WebProtocol.CreateOfficeRequest})
        {conn, request_content}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, request_content} ->
          handle_post(conn, request_content)
      end
    end
    defp handle_method(_, conn) do
      conn
        |> put_resp_header("allow", "GET, POST")
        |> send_resp(405, "")
    end

    defp handle_get(conn) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesOfficeService.Impl.get_offices", args: [get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesOfficeService.Impl.get_offices(get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesOfficeService.Impl.get_offices", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DataProtocol.Collection, {{:custom, DbProtocol.Office}}})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesOfficeService.Impl.get_offices", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesOfficeService.Impl.get_offices", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

    defp handle_post(conn, request_content) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesOfficeService.Impl.create_office", args: [request_content, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesOfficeService.Impl.create_office(request_content, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesOfficeService.Impl.create_office", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DbProtocol.Office})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.BadRequestError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesOfficeService.Impl.create_office", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.BadRequestError, {{:custom, WebProtocol.OfficeManagementError}}})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(400, body)
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesOfficeService.Impl.create_office", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesOfficeService.Impl.create_office", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

  end

  defmodule Office do

    require Logger
    import Plug.Conn

    def init(opts), do: opts

    def call(%{method: method} = conn, _opts), do: handle_method(method, conn)

    defp handle_method("GET", conn) do
      try do
        id = Igor.Json.parse_field!(conn.path_params, "id", :long)
        {conn, id}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, id} ->
          handle_get(conn, id)
      end
    end
    defp handle_method("PUT", conn) do
      try do
        {:ok, body, conn} = read_body(conn)
        request_content = body
          |> Igor.Json.decode!()
          |> Igor.Json.parse_value!({:custom, WebProtocol.UpdateOfficeRequest})
        id = Igor.Json.parse_field!(conn.path_params, "id", :long)
        {conn, request_content, id}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, request_content, id} ->
          handle_put(conn, request_content, id)
      end
    end
    defp handle_method("DELETE", conn) do
      try do
        id = Igor.Json.parse_field!(conn.path_params, "id", :long)
        {conn, id}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, id} ->
          handle_delete(conn, id)
      end
    end
    defp handle_method(_, conn) do
      conn
        |> put_resp_header("allow", "GET, PUT, DELETE")
        |> send_resp(405, "")
    end

    defp handle_get(conn, id) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesOfficeService.Impl.get_office", args: [id, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesOfficeService.Impl.get_office(id, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesOfficeService.Impl.get_office", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DbProtocol.Office})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesOfficeService.Impl.get_office", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e in DataProtocol.NotFoundError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesOfficeService.Impl.get_office", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.NotFoundError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(404, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesOfficeService.Impl.get_office", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

    defp handle_put(conn, request_content, id) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesOfficeService.Impl.update_office", args: [request_content, id, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesOfficeService.Impl.update_office(request_content, id, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesOfficeService.Impl.update_office", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DbProtocol.Office})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.BadRequestError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesOfficeService.Impl.update_office", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.BadRequestError, {{:custom, WebProtocol.OfficeManagementError}}})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(400, body)
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesOfficeService.Impl.update_office", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e in DataProtocol.NotFoundError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesOfficeService.Impl.update_office", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.NotFoundError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(404, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesOfficeService.Impl.update_office", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

    defp handle_delete(conn, id) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesOfficeService.Impl.delete_office", args: [id, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesOfficeService.Impl.delete_office(id, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesOfficeService.Impl.delete_office", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DataProtocol.GenericResponse})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesOfficeService.Impl.delete_office", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e in DataProtocol.NotFoundError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesOfficeService.Impl.delete_office", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.NotFoundError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(404, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesOfficeService.Impl.delete_office", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

  end

  @doc """
  Get offices
  """
  @callback get_offices(session :: any()) :: DataProtocol.Collection.t(DbProtocol.Office.t())

  @doc """
  Create an office
  """
  @callback create_office(WebProtocol.CreateOfficeRequest.t(), session :: any()) :: DbProtocol.Office.t()

  @doc """
  Get an office
  """
  @callback get_office(integer, session :: any()) :: DbProtocol.Office.t()

  @doc """
  Update an office
  """
  @callback update_office(WebProtocol.UpdateOfficeRequest.t(), integer, session :: any()) :: DbProtocol.Office.t()

  @doc """
  Delete an office
  """
  @callback delete_office(integer, session :: any()) :: DataProtocol.GenericResponse.t()

end
