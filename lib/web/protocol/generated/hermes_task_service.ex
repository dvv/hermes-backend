# @author Igor compiler
# @doc Compiler version: igorc 2.1.4
# DO NOT EDIT THIS FILE - it is machine generated

defmodule WebProtocol.HermesTaskService do

  defmodule TaskSyncBamboo do

    require Logger
    import Plug.Conn

    def init(opts), do: opts

    def call(%{method: method} = conn, _opts), do: handle_method(method, conn)

    defp handle_method("PUT", conn) do
      try do
        {:ok, body, conn} = read_body(conn)
        request_content = body
          |> Igor.Json.decode!()
          |> Igor.Json.parse_value!({:custom, WebProtocol.SyncBambooTaskRequest})
        year = Igor.Json.parse_field!(conn.path_params, "year", :int)
        month = Igor.Json.parse_field!(conn.path_params, "month", :int)
        {conn, request_content, year, month}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, request_content, year, month} ->
          handle_put(conn, request_content, year, month)
      end
    end
    defp handle_method(_, conn) do
      conn
        |> put_resp_header("allow", "PUT")
        |> send_resp(405, "")
    end

    defp handle_put(conn, request_content, year, month) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesTaskService.Impl.sync_bamboo", args: [request_content, year, month, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesTaskService.Impl.sync_bamboo(request_content, year, month, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesTaskService.Impl.sync_bamboo", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DataProtocol.GenericResponse})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesTaskService.Impl.sync_bamboo", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesTaskService.Impl.sync_bamboo", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

  end

  defmodule TaskSyncLdap do

    require Logger
    import Plug.Conn

    def init(opts), do: opts

    def call(%{method: method} = conn, _opts), do: handle_method(method, conn)

    defp handle_method("PUT", conn) do
      try do
        {:ok, body, conn} = read_body(conn)
        request_content = body
          |> Igor.Json.decode!()
          |> Igor.Json.parse_value!({:custom, CommonProtocol.Empty})
        {conn, request_content}
      rescue
        e in Igor.DecodeError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
        e in Igor.Http.BadRequestError ->
          body = Igor.Json.encode!(%{"error" => e.message})
          conn
              |> put_resp_content_type("application/json")
              |> send_resp(400, body)
      else
        {conn, request_content} ->
          handle_put(conn, request_content)
      end
    end
    defp handle_method(_, conn) do
      conn
        |> put_resp_header("allow", "PUT")
        |> send_resp(405, "")
    end

    defp handle_put(conn, request_content) do
      Logger.debug("rpc_req", data: %{method: "WebProtocol.HermesTaskService.Impl.sync_ldap", args: [request_content, get_session(conn, :api)]}, domain: [:rpc])
      response_content = WebProtocol.HermesTaskService.Impl.sync_ldap(request_content, get_session(conn, :api))
      Logger.debug("rpc_res", data: %{method: "WebProtocol.HermesTaskService.Impl.sync_ldap", result: response_content}, domain: [:rpc])
      body = response_content
        |> Igor.Json.pack_value({:custom, DataProtocol.GenericResponse})
        |> Igor.Json.encode!
      conn
        |> put_resp_content_type("application/json")
        |> send_resp(200, body)
    rescue
      e in DataProtocol.ForbiddenError ->
        Logger.notice("rpc_exc", data: %{method: "WebProtocol.HermesTaskService.Impl.sync_ldap", exception: e}, domain: [:rpc])
        body = e
          |> Igor.Json.pack_value({:custom, DataProtocol.ForbiddenError})
          |> Igor.Json.encode!
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(403, body)
      e ->
        Logger.error("rpc_exc", data: %{method: "WebProtocol.HermesTaskService.Impl.sync_ldap", exception: e, stacktrace: __STACKTRACE__}, domain: [:rpc])
        body = Igor.Json.encode!(%{"error" => inspect(e)})
        conn
          |> put_resp_content_type("application/json")
          |> send_resp(500, body)
    end

  end

  @doc """
  Synchronize with BambooHR
  """
  @callback sync_bamboo(WebProtocol.SyncBambooTaskRequest.t(), integer, integer, session :: any()) :: DataProtocol.GenericResponse.t()

  @doc """
  Synchronize with LDAP
  """
  @callback sync_ldap(CommonProtocol.Empty.t(), session :: any()) :: DataProtocol.GenericResponse.t()

end
