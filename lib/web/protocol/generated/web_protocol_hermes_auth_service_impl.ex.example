# @author Igor compiler
# @doc Compiler version: igorc 2.1.4
# DO NOT EDIT THIS FILE - it is machine generated

defmodule WebProtocol.HermesAuthService.Impl do

  @behaviour WebProtocol.HermesAuthService

  # ----------------------------------------------------------------------------

  defmacro __using__(which) when is_atom(which), do: apply(__MODULE__, which, [])

  def router() do
    quote do
      match "/api/auth/personnel/login", to: WebProtocol.HermesAuthService.LoginPersonnel
      match "/api/auth/personnel/logout", to: WebProtocol.HermesAuthService.LogoutPersonnel
      match "/api/auth/personnel/profile", to: WebProtocol.HermesAuthService.GetMyPersonnelProfile
      match "/api/auth/personnel/roles/:project_id/me", to: WebProtocol.HermesAuthService.GetMyRolesForProject
      match "/api/auth/personnel/status", to: WebProtocol.HermesAuthService.GetPersonnelStatus
    end
  end

  # ----------------------------------------------------------------------------

  @doc """
  Get current personnel session status
  """
  @spec get_personnel_status(
    session :: any()
  ) :: WebProtocol.PersonnelStatusResponse.t()
  @impl true
  def get_personnel_status(
    session
  )
  do
    unless Hermes.can_login?(session), do: raise DataProtocol.ForbiddenError
    raise "not_yet_implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Login personnel
  """
  @spec login_personnel(
    request :: WebProtocol.PersonnelLoginRequest.t(),
    conn :: Plug.Conn.t()
  ) :: {WebProtocol.PersonnelLoginResponse.t(), Plug.Conn.t()}
  @impl true
  def login_personnel(
    request,
    conn
  ) when
    is_struct(request, WebProtocol.PersonnelLoginRequest)
  do
    raise "not_yet_implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Logout personnel
  """
  @spec logout_personnel(
    request :: CommonProtocol.Empty.t(),
    conn :: Plug.Conn.t()
  ) :: {DataProtocol.GenericResponse.t(), Plug.Conn.t()}
  @impl true
  def logout_personnel(
    request,
    conn
  ) when
    is_struct(request, CommonProtocol.Empty)
  do
    raise "not_yet_implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Get current personnel profile
  """
  @spec get_my_personnel_profile(
    session :: any()
  ) :: DbProtocol.PersonnelAccount.t()
  @impl true
  def get_my_personnel_profile(
    session
  )
  do
    unless Hermes.can_login?(session), do: raise DataProtocol.ForbiddenError
    item = Hermes.get_my_personnel_profile!()
    # log_user_action(session, :read, item)
    item
  end

  # ----------------------------------------------------------------------------

  @doc """
  Get current personnel roles for a project
  """
  @spec get_my_roles_for_project(
    project_id :: integer,
    session :: any()
  ) :: DbProtocol.PersonnelAccountRole.t()
  @impl true
  def get_my_roles_for_project(
    project_id,
    session
  ) when
    is_integer(project_id)
  do
    unless Hermes.can_login?(session), do: raise DataProtocol.ForbiddenError
    item = Hermes.get_my_roles_for_project!(project_id)
    # log_user_action(session, :read, item)
    item
  end

end
