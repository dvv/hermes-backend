# @author Igor compiler
# @doc Compiler version: igorc 2.1.4
# DO NOT EDIT THIS FILE - it is machine generated

defmodule WebProtocol.HermesReportService.Impl do

  @behaviour WebProtocol.HermesReportService

  # ----------------------------------------------------------------------------

  defmacro __using__(which) when is_atom(which), do: apply(__MODULE__, which, [])

  def router() do
    quote do
      match "/api/reports/visma", to: WebProtocol.HermesReportService.VismaReports
      match "/api/reports/visma/omitted/office/:office_id", to: WebProtocol.HermesReportService.VismaReportOmittedEmployees
      match "/api/reports/visma/:report_id", to: WebProtocol.HermesReportService.VismaReport
      match "/api/reports/visma/:report_id/deliver", to: WebProtocol.HermesReportService.VismaReportDelivery
      match "/api/reports/visma/:report_id/download", to: WebProtocol.HermesReportService.VismaReportDownload
      match "/api/reports/visma/:report_id/status", to: WebProtocol.HermesReportService.VismaReportDeliveryStatus
      match "/api/reports/visma/:year/:month/office/:office_id", to: WebProtocol.HermesReportService.VismaReportsForOffice
    end
  end

  # ----------------------------------------------------------------------------

  @doc """
  Get monthly visma reports for particular office
  """
  @spec get_visma_reports_for_office(
    year :: integer,
    month :: integer,
    office_id :: integer,
    session :: any()
  ) :: DataProtocol.Collection.t(DbProtocol.VismaReport.t())
  @impl true
  def get_visma_reports_for_office(
    year,
    month,
    office_id,
    session
  ) when
    is_integer(year) and
    is_integer(month) and
    is_integer(office_id)
  do
    unless Hermes.can_get_visma_report?(session), do: raise DataProtocol.ForbiddenError
    items = Hermes.get_visma_reports_for_office(year, month, office_id)
    %DataProtocol.Collection{items: items}
  end

  # ----------------------------------------------------------------------------

  @doc """
  Get visma report
  """
  @spec get_visma_report(
    report_id :: integer,
    session :: any()
  ) :: DbProtocol.VismaReport.t()
  @impl true
  def get_visma_report(
    report_id,
    session
  ) when
    is_integer(report_id)
  do
    unless Hermes.can_get_visma_report?(session), do: raise DataProtocol.ForbiddenError
    item = Hermes.get_visma_report!(report_id)
    # log_user_action(session, :read, item)
    item
  end

  # ----------------------------------------------------------------------------

  @doc """
  Create monthly visma report for particular office
  """
  @spec create_visma_report(
    request_content :: WebProtocol.CreateVismaReportRequest.t(),
    session :: any()
  ) :: DbProtocol.VismaReport.t()
  @impl true
  def create_visma_report(
    request_content,
    session
  ) when
    is_struct(request_content, WebProtocol.CreateVismaReportRequest)
  do
    unless Hermes.can_create_visma_report?(session), do: raise DataProtocol.ForbiddenError
    item = Hermes.create_visma_report!(Map.from_struct(request_content))
    # log_user_action(session, :create, item)
    item
  end

  # ----------------------------------------------------------------------------

  @doc """
  Update visma report
  """
  @spec update_visma_report(
    request_content :: WebProtocol.UpdateVismaReportRequest.t(),
    report_id :: integer,
    session :: any()
  ) :: DbProtocol.VismaReport.t()
  @impl true
  def update_visma_report(
    request_content,
    report_id,
    session
  ) when
    is_map(request_content) and
    is_integer(report_id)
  do
    unless Hermes.can_update_visma_report?(session), do: raise DataProtocol.ForbiddenError
    item = Hermes.update_visma_report!(report_id, request_content)
    # log_user_action(session, :update, item)
    item
  end

  # ----------------------------------------------------------------------------

  @doc """
  Get visma report details
  """
  @spec download_visma_report(
    report_id :: integer,
    session :: any()
  ) :: Igor.Json.json()
  @impl true
  def download_visma_report(
    report_id,
    session
  ) when
    is_integer(report_id)
  do
    unless Hermes.can_get_visma_report?(session), do: raise DataProtocol.ForbiddenError
    raise "not_yet_implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Deliver Visma report to Visma through Junipeer
  """
  @spec deliver_visma_report(
    request_content :: CommonProtocol.Empty.t(),
    report_id :: integer,
    session :: any()
  ) :: DbProtocol.VismaReport.t()
  @impl true
  def deliver_visma_report(
    request_content,
    report_id,
    session
  ) when
    is_struct(request_content, CommonProtocol.Empty) and
    is_integer(report_id)
  do
    unless Hermes.can_create_visma_report?(session), do: raise DataProtocol.ForbiddenError
    raise "not_yet_implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Update Visma report delivery status from Junipeer
  """
  @spec update_visma_report_delivery_status(
    request_content :: CommonProtocol.Empty.t(),
    report_id :: integer,
    session :: any()
  ) :: DbProtocol.VismaReport.t()
  @impl true
  def update_visma_report_delivery_status(
    request_content,
    report_id,
    session
  ) when
    is_struct(request_content, CommonProtocol.Empty) and
    is_integer(report_id)
  do
    unless Hermes.can_create_visma_report?(session), do: raise DataProtocol.ForbiddenError
    raise "not_yet_implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Get omitted employees for last Visma report
  """
  @spec get_omitted_employees_for_last_visma_report(
    office_id :: integer,
    session :: any()
  ) :: WebProtocol.OmittedEmployees.t()
  @impl true
  def get_omitted_employees_for_last_visma_report(
    office_id,
    session
  ) when
    is_integer(office_id)
  do
    unless Hermes.can_get_visma_report?(session), do: raise DataProtocol.ForbiddenError
    raise "not_yet_implemented"
  end

end
