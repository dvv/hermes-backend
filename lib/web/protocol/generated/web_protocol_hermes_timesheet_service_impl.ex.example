# @author Igor compiler
# @doc Compiler version: igorc 2.1.4
# DO NOT EDIT THIS FILE - it is machine generated

defmodule WebProtocol.HermesTimesheetService.Impl do

  @behaviour WebProtocol.HermesTimesheetService

  # ----------------------------------------------------------------------------

  defmacro __using__(which) when is_atom(which), do: apply(__MODULE__, which, [])

  def router() do
    quote do
      match "/api/timesheet/bulk/allocate", to: WebProtocol.HermesTimesheetService.TimesheetBulkAllocate
      match "/api/timesheet/bulk/off", to: WebProtocol.HermesTimesheetService.TimesheetBulkTimeOff
      match "/api/timesheet/bulk/protect", to: WebProtocol.HermesTimesheetService.TimesheetBulkProtect
      match "/api/timesheet/bulk/reset", to: WebProtocol.HermesTimesheetService.TimesheetBulkReset
      match "/api/timesheet/bulk/unprotect", to: WebProtocol.HermesTimesheetService.TimesheetBulkUnprotect
      match "/api/timesheet/cell/:cell_id", to: WebProtocol.HermesTimesheetService.TimesheetCell
      match "/api/timesheet/monthly/:year/:month/employee/:personnel_id", to: WebProtocol.HermesTimesheetService.MonthlyEmployeeTimesheet
      match "/api/timesheet/monthly/:year/:month/employee/:personnel_id/protect", to: WebProtocol.HermesTimesheetService.TimesheetCellProtectMonthForEmployee
      match "/api/timesheet/monthly/:year/:month/everyone", to: WebProtocol.HermesTimesheetService.MonthlyEveryoneTimesheet
      match "/api/timesheet/monthly/:year/:month/office/:office_id", to: WebProtocol.HermesTimesheetService.MonthlyOfficeTimesheet
      match "/api/timesheet/monthly/:year/:month/project/:project_id", to: WebProtocol.HermesTimesheetService.MonthlyProjectTimesheet
      match "/api/timesheet/monthly/:year/:month/regenerate", to: WebProtocol.HermesTimesheetService.TimesheetRegenerate
      match "/api/timesheet/monthly/:year/:month/team/:team_id", to: WebProtocol.HermesTimesheetService.MonthlyTeamTimesheet
    end
  end

  # ----------------------------------------------------------------------------

  @doc """
  Get a timesheet cell
  """
  @spec get_timesheet_cell(
    cell_id :: integer,
    session :: any()
  ) :: DbProtocol.TimesheetCell.t()
  @impl true
  def get_timesheet_cell(
    cell_id,
    session
  ) when
    is_integer(cell_id)
  do
    unless Hermes.can_get_timesheet?(session), do: raise DataProtocol.ForbiddenError
    raise "not_yet_implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Allocate a lot of timesheet cells for a project
  """
  @spec allocate_timesheet_cell_bulk(
    request_content :: WebProtocol.BulkTimesheetAllocate.t(),
    session :: any()
  ) :: [DbProtocol.TimesheetCell.t()]
  @impl true
  def allocate_timesheet_cell_bulk(
    request_content,
    session
  ) when
    is_struct(request_content, WebProtocol.BulkTimesheetAllocate)
  do
    unless Hermes.can_get_timesheet?(session), do: raise DataProtocol.ForbiddenError
    raise "not_yet_implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Reset a lot of timesheet cells for a project
  """
  @spec reset_timesheet_cell_bulk(
    request_content :: WebProtocol.BulkTimesheetAction.t(),
    session :: any()
  ) :: [DbProtocol.TimesheetCell.t()]
  @impl true
  def reset_timesheet_cell_bulk(
    request_content,
    session
  ) when
    is_struct(request_content, WebProtocol.BulkTimesheetAction)
  do
    unless Hermes.can_get_timesheet?(session), do: raise DataProtocol.ForbiddenError
    raise "not_yet_implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Set a time_off to a lot of timesheet cells
  """
  @spec set_timesheet_cell_off_bulk(
    request_content :: WebProtocol.BulkTimesheetTimeOff.t(),
    session :: any()
  ) :: [DbProtocol.TimesheetCell.t()]
  @impl true
  def set_timesheet_cell_off_bulk(
    request_content,
    session
  ) when
    is_struct(request_content, WebProtocol.BulkTimesheetTimeOff)
  do
    unless Hermes.can_get_timesheet?(session), do: raise DataProtocol.ForbiddenError
    raise "not_yet_implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Protect a lot of timesheet cells from changes
  """
  @spec protect_timesheet_cell_bulk(
    request_content :: WebProtocol.BulkTimesheetProtect.t(),
    session :: any()
  ) :: [DbProtocol.TimesheetCell.t()]
  @impl true
  def protect_timesheet_cell_bulk(
    request_content,
    session
  ) when
    is_struct(request_content, WebProtocol.BulkTimesheetProtect)
  do
    unless Hermes.can_protect_timesheet?(session), do: raise DataProtocol.ForbiddenError
    raise "not_yet_implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Remove protection from a lot of timesheet cells
  """
  @spec unprotect_timesheet_cell_bulk(
    request_content :: WebProtocol.BulkTimesheetProtect.t(),
    session :: any()
  ) :: [DbProtocol.TimesheetCell.t()]
  @impl true
  def unprotect_timesheet_cell_bulk(
    request_content,
    session
  ) when
    is_struct(request_content, WebProtocol.BulkTimesheetProtect)
  do
    unless Hermes.can_unprotect_timesheet?(session), do: raise DataProtocol.ForbiddenError
    raise "not_yet_implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Regenerate timesheet cells for all employees for the period specified
  """
  @spec regenerate_timesheet_cells(
    request_content :: CommonProtocol.Empty.t(),
    year :: integer,
    month :: integer,
    session :: any()
  ) :: DataProtocol.GenericResponse.t()
  @impl true
  def regenerate_timesheet_cells(
    request_content,
    year,
    month,
    session
  ) when
    is_struct(request_content, CommonProtocol.Empty) and
    is_integer(year) and
    is_integer(month)
  do
    unless Hermes.can_regenerate_timesheet?(session), do: raise DataProtocol.ForbiddenError
    raise "not_yet_implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Protect a monthly range of timesheet cells for particular employee from changes
  """
  @spec protect_timesheet_month_for_employee(
    request_content :: CommonProtocol.Empty.t(),
    year :: integer,
    month :: integer,
    personnel_id :: integer,
    session :: any()
  ) :: DataProtocol.GenericResponse.t()
  @impl true
  def protect_timesheet_month_for_employee(
    request_content,
    year,
    month,
    personnel_id,
    session
  ) when
    is_struct(request_content, CommonProtocol.Empty) and
    is_integer(year) and
    is_integer(month) and
    is_integer(personnel_id)
  do
    unless Hermes.can_protect_timesheet?(session), do: raise DataProtocol.ForbiddenError
    raise "not_yet_implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Remove protection from a monthly range of timesheet cells for particular employee
  """
  @spec unprotect_timesheet_month_for_employee(
    year :: integer,
    month :: integer,
    personnel_id :: integer,
    session :: any()
  ) :: DataProtocol.GenericResponse.t()
  @impl true
  def unprotect_timesheet_month_for_employee(
    year,
    month,
    personnel_id,
    session
  ) when
    is_integer(year) and
    is_integer(month) and
    is_integer(personnel_id)
  do
    unless Hermes.can_unprotect_timesheet?(session), do: raise DataProtocol.ForbiddenError
    raise "not_yet_implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Get monthly timesheet for specified year and month and employee
  """
  @spec get_monthly_timesheet_for_employee(
    year :: integer,
    month :: integer,
    personnel_id :: integer,
    session :: any()
  ) :: WebProtocol.MonthlyEmployeeTimesheet.t()
  @impl true
  def get_monthly_timesheet_for_employee(
    year,
    month,
    personnel_id,
    session
  ) when
    is_integer(year) and
    is_integer(month) and
    is_integer(personnel_id)
  do
    unless Hermes.can_get_timesheet?(session), do: raise DataProtocol.ForbiddenError
    raise "not_yet_implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Get monthly timesheet for specified year and month and project
  """
  @spec get_monthly_timesheet_for_project(
    year :: integer,
    month :: integer,
    project_id :: integer,
    session :: any()
  ) :: DataProtocol.Collection.t(WebProtocol.MonthlyEmployeeTimesheet.t())
  @impl true
  def get_monthly_timesheet_for_project(
    year,
    month,
    project_id,
    session
  ) when
    is_integer(year) and
    is_integer(month) and
    is_integer(project_id)
  do
    unless Hermes.can_get_timesheet?(session), do: raise DataProtocol.ForbiddenError
    raise "not_yet_implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Get monthly timesheet for specified year and month and office
  """
  @spec get_monthly_timesheet_for_office(
    year :: integer,
    month :: integer,
    office_id :: integer,
    session :: any()
  ) :: DataProtocol.Collection.t(WebProtocol.MonthlyEmployeeTimesheet.t())
  @impl true
  def get_monthly_timesheet_for_office(
    year,
    month,
    office_id,
    session
  ) when
    is_integer(year) and
    is_integer(month) and
    is_integer(office_id)
  do
    unless Hermes.can_get_timesheet?(session), do: raise DataProtocol.ForbiddenError
    raise "not_yet_implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Get monthly timesheet for specified year and month and team
  """
  @spec get_monthly_timesheet_for_team(
    year :: integer,
    month :: integer,
    team_id :: integer,
    session :: any()
  ) :: DataProtocol.Collection.t(WebProtocol.MonthlyEmployeeTimesheet.t())
  @impl true
  def get_monthly_timesheet_for_team(
    year,
    month,
    team_id,
    session
  ) when
    is_integer(year) and
    is_integer(month) and
    is_integer(team_id)
  do
    unless Hermes.can_get_timesheet?(session), do: raise DataProtocol.ForbiddenError
    raise "not_yet_implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Get monthly timesheet for specified year and month for everyone
  """
  @spec get_monthly_timesheet_for_everyone(
    year :: integer,
    month :: integer,
    session :: any()
  ) :: DataProtocol.Collection.t(WebProtocol.MonthlyEmployeeTimesheet.t())
  @impl true
  def get_monthly_timesheet_for_everyone(
    year,
    month,
    session
  ) when
    is_integer(year) and
    is_integer(month)
  do
    unless Hermes.can_get_timesheet?(session), do: raise DataProtocol.ForbiddenError
    raise "not_yet_implemented"
  end

end
